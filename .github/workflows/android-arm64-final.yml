name: Android ARM64 Final Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: 1.10.0)'
        required: true
        type: string

env:
  BUILD_TAGS: "with_gvisor,with_quic,with_dhcp,with_wireguard,with_utls,with_acme,with_clash_api,with_tailscale"

jobs:
  prepare:
    name: Prepare Build Info
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "📦 构建版本: ${VERSION}"

  build_android_arm64:
    name: Build Android ARM64
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ^1.24

      - name: Setup Android NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r28
          local-cache: true

      - name: Build Android ARM64 Binary
        run: |
          set -xeuo pipefail
          echo "=== 开始 Android ARM64 构建 ==="
          
          # 安装构建工具
          go install -v ./cmd/internal/build
          
          # 设置编译器 - 完全按照现有工作流的方式
          export CC='aarch64-linux-android21-clang'
          export CXX="${CC}++"
          
          echo "=== 验证环境 ==="
          echo "CC: $CC"
          echo "CXX: $CXX"
          echo "CGO_ENABLED: $CGO_ENABLED"
          echo "BUILD_GOOS: $BUILD_GOOS"
          echo "BUILD_GOARCH: $BUILD_GOARCH"
          
          # 创建输出目录
          mkdir -p dist
          
          # 构建二进制文件 - 完全按照现有工作流的方式
          echo "=== 构建 Android ARM64 二进制文件 ==="
          GOOS=$BUILD_GOOS GOARCH=$BUILD_GOARCH build go build -v -trimpath -o dist/sing-box -tags "${BUILD_TAGS}" \
            -ldflags '-s -buildid= -X github.com/sagernet/sing-box/constant.Version=${{ needs.prepare.outputs.version }}' \
            ./cmd/sing-box
          
          # 验证构建结果
          echo "=== 验证构建结果 ==="
          ls -la dist/
          file dist/sing-box
          
          # 设置可执行权限
          chmod +x dist/sing-box
          
          echo "✅ Android ARM64 构建完成"
        env:
          CGO_ENABLED: "1"
          BUILD_GOOS: android
          BUILD_GOARCH: arm64

      - name: Create archive
        run: |
          cd dist
          tar -czf sing-box-${{ needs.prepare.outputs.version }}-android-arm64.tar.gz sing-box
          ls -la

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-arm64-binary-final
          path: |
            dist/sing-box
            dist/sing-box-${{ needs.prepare.outputs.version }}-android-arm64.tar.gz

      - name: Show build summary
        run: |
          echo "🎉 Android ARM64 构建完成!"
          echo "版本: ${{ needs.prepare.outputs.version }}"
          echo "文件:"
          ls -la dist/
          echo "文件类型:"
          file dist/sing-box
