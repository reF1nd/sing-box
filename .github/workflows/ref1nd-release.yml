name: reF1nd Release Build

on:
  push:
    tags:
      - '*reF1nd*'
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag name containing 'reF1nd'"
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TAGS: 'with_gvisor,with_quic,with_dhcp,with_wireguard,with_utls,with_acme,with_clash_api,with_tailscale'

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      commit_info: ${{ steps.commit.outputs.info }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Get commit info
        id: commit
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          COMMIT_DATE=$(git log -1 --pretty=format:"%ci")
          
          INFO="Commit: ${COMMIT_SHA:0:8} by ${COMMIT_AUTHOR} on ${COMMIT_DATE}\nMessage: ${COMMIT_MSG}"
          echo "info<<EOF" >> $GITHUB_OUTPUT
          echo -e "${INFO}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## 更新日志" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log --oneline -10 --pretty=format:"- %s (%h)" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build_binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        include:
          - { os: windows, arch: amd64, ext: .exe }
          - { os: linux, arch: amd64, ext: "" }
          - { os: linux, arch: arm64, ext: "", openwrt: "aarch64_cortex-a53" }
          - { os: android, arch: arm64, ext: "", ndk: "aarch64-linux-android21" }
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ^1.24

      - name: Setup Android NDK
        if: matrix.os == 'android'
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r28
          local-cache: true

      - name: Build binary (Non-Android)
        if: matrix.os != 'android'
        run: |
          mkdir -p dist
          go build -v -trimpath -o dist/sing-box${{ matrix.ext }} -tags "${BUILD_TAGS}" \
          -ldflags '-s -buildid= -X github.com/sagernet/sing-box/constant.Version=${{ needs.prepare.outputs.version }}' \
          ./cmd/sing-box
        env:
          CGO_ENABLED: "0"
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}

      - name: Build binary (Android)
        if: matrix.os == 'android'
        run: |
          set -xeuo pipefail
          go install -v ./cmd/internal/build
          export ANDROID_NDK_HOME="${{ steps.setup-ndk.outputs.ndk-path }}"
          export CC="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.ndk }}-clang"
          export CXX="${CC}++"
          mkdir -p dist
          build go build -v -trimpath -o dist/sing-box -tags "${BUILD_TAGS}" \
          -ldflags '-s -buildid= -X github.com/sagernet/sing-box/constant.Version=${{ needs.prepare.outputs.version }}' \
          ./cmd/sing-box
        env:
          CGO_ENABLED: "1"
          GOOS: android
          GOARCH: ${{ matrix.arch }}

      - name: Set binary name
        run: |
          BINARY_NAME="sing-box-${{ needs.prepare.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}"
          echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_ENV

      - name: Archive binary
        run: |
          cd dist
          mkdir -p "${BINARY_NAME}"
          cp ../LICENSE "${BINARY_NAME}/"
          if [ '${{ matrix.os }}' = 'windows' ]; then
            cp sing-box${{ matrix.ext }} "${BINARY_NAME}/"
            zip -r "${BINARY_NAME}.zip" "${BINARY_NAME}"
            rm -rf "${BINARY_NAME}"
          else
            cp sing-box "${BINARY_NAME}/"
            tar -czvf "${BINARY_NAME}.tar.gz" "${BINARY_NAME}"
            rm -rf "${BINARY_NAME}"
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/

  build_packages:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        include:
          - { os: linux, arch: amd64, debian: amd64, package_type: deb }
          - { os: linux, arch: amd64, alpine: x86_64, package_type: apk }
          - { os: linux, arch: arm64, openwrt: aarch64_cortex-a53, package_type: ipk }
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ^1.24

      - name: Build binary
        run: |
          mkdir -p dist
          go build -v -trimpath -o dist/sing-box -tags "${BUILD_TAGS}" \
          -ldflags '-s -buildid= -X github.com/sagernet/sing-box/constant.Version=${{ needs.prepare.outputs.version }}' \
          ./cmd/sing-box
        env:
          CGO_ENABLED: "0"
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}

      - name: Install packaging tools
        run: |
          sudo gem install fpm

      - name: Package DEB
        if: matrix.package_type == 'deb'
        run: |
          PKG_VERSION="${{ needs.prepare.outputs.version }}"
          PKG_VERSION="${PKG_VERSION//-/\~}"
          cp .fpm_systemd .fpm
          fpm -t deb \
            -v "$PKG_VERSION" \
            -p "dist/sing-box_${{ needs.prepare.outputs.version }}_${{ matrix.os }}_${{ matrix.debian }}.deb" \
            --architecture ${{ matrix.debian }} \
            dist/sing-box=/usr/bin/sing-box

      - name: Package Alpine APK
        if: matrix.package_type == 'apk'
        run: |
          PKG_VERSION="${{ needs.prepare.outputs.version }}"
          PKG_VERSION="${PKG_VERSION//-/\~}"
          # 创建 Alpine APK 包配置
          echo "-s dir" > .fpm_alpine
          echo "--name sing-box" >> .fpm_alpine
          echo "--category net" >> .fpm_alpine
          echo "--license GPLv3-or-later" >> .fpm_alpine
          echo "--description \"The universal proxy platform.\"" >> .fpm_alpine
          echo "--url \"https://sing-box.sagernet.org/\"" >> .fpm_alpine
          echo "--maintainer \"nekohasekai <contact-git@sekai.icu>\"" >> .fpm_alpine
          cp .fpm_alpine .fpm
          fpm -t apk \
            -v "$PKG_VERSION" \
            -p "dist/sing-box_${{ needs.prepare.outputs.version }}_alpine_${{ matrix.alpine }}.apk" \
            --architecture ${{ matrix.alpine }} \
            dist/sing-box=/usr/bin/sing-box

      - name: Package OpenWrt IPK
        if: matrix.package_type == 'ipk'
        run: |
          PKG_VERSION="${{ needs.prepare.outputs.version }}"
          PKG_VERSION="${PKG_VERSION//-/\~}"
          cp .fpm_openwrt .fpm
          fpm -t deb \
            -v "$PKG_VERSION" \
            -p "dist/openwrt.deb" \
            --architecture all \
            dist/sing-box=/usr/bin/sing-box
          .github/deb2ipk.sh "${{ matrix.openwrt }}" "dist/openwrt.deb" "dist/sing-box_${{ needs.prepare.outputs.version }}_openwrt_${{ matrix.openwrt }}.ipk"
          rm "dist/openwrt.deb"

      - name: Cleanup binary
        run: rm dist/sing-box

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.package_type }}-${{ matrix.arch }}
          path: dist/

  collect_and_upload:
    name: Collect Artifacts and Upload
    runs-on: ubuntu-latest
    needs: [prepare, build_binaries, build_packages]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: List artifacts
        run: |
          echo "=== 构建产物列表 ==="
          find artifacts -type f -name "*.zip" -o -name "*.tar.gz" -o -name "*.deb" -o -name "*.apk" -o -name "*.ipk" | sort

      - name: Upload to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ref1nd-release-${{ needs.prepare.outputs.version }}
          path: artifacts/
          retention-days: 30

  push_android_binary:
    name: Push Android Binary to box_for_magisk
    runs-on: ubuntu-latest
    needs: [prepare, build_binaries]
    if: always() && needs.build_binaries.result == 'success'
    steps:
      - name: Download Android ARM64 artifact
        uses: actions/download-artifact@v4
        with:
          name: binary-android-arm64
          path: android_binary/

      - name: Extract Android binary
        run: |
          cd android_binary
          echo "=== 查看下载的文件 ==="
          ls -la

          # 查找并提取 Android ARM64 二进制文件
          if [ -f "sing-box-${{ needs.prepare.outputs.version }}-android-arm64.tar.gz" ]; then
            echo "找到打包文件，正在解压..."
            tar -xzf "sing-box-${{ needs.prepare.outputs.version }}-android-arm64.tar.gz"
            BINARY_DIR="sing-box-${{ needs.prepare.outputs.version }}-android-arm64"
            ls -la "${BINARY_DIR}/"
          else
            echo "未找到打包文件，直接查找二进制文件..."
            BINARY_DIR="."
          fi

          # 查找 sing-box 二进制文件
          if [ -f "${BINARY_DIR}/sing-box" ]; then
            cp "${BINARY_DIR}/sing-box" ./sing-box-android-arm64
            echo "✅ 找到 Android ARM64 二进制文件"
            ls -la sing-box-android-arm64
            file sing-box-android-arm64
          else
            echo "❌ 未找到 Android ARM64 二进制文件"
            echo "查找所有可能的文件："
            find . -name "*sing-box*" -type f
            exit 1
          fi

      - name: Checkout box_for_magisk repository
        uses: actions/checkout@v4
        with:
          repository: ridesnails/box_for_magisk
          ref: simple
          token: ${{ secrets.BOX_FOR_MAGISK_TOKEN || secrets.GITHUB_TOKEN }}
          path: box_for_magisk

      - name: Setup Git
        run: |
          cd box_for_magisk
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Update binary in box_for_magisk
        run: |
          cd box_for_magisk

          # 创建 box/bin 目录（如果不存在）
          mkdir -p box/bin

          # 复制 Android ARM64 二进制文件
          cp ../android_binary/sing-box-android-arm64 box/bin/sing-box
          chmod +x box/bin/sing-box

          # 检查文件
          echo "=== 更新的文件信息 ==="
          ls -la box/bin/sing-box
          file box/bin/sing-box

          # 提交更改
          git add box/bin/sing-box
          if git diff --staged --quiet; then
            echo "没有更改需要提交"
          else
            git commit -m "Update sing-box binary to ${{ needs.prepare.outputs.version }} (reF1nd)"
            git push origin simple
            echo "✅ 成功推送 Android ARM64 二进制文件到 box_for_magisk/simple"
          fi

  telegram_notify:
    name: Telegram Notification
    runs-on: ubuntu-latest
    needs: [prepare, collect_and_upload, push_android_binary]
    if: always()
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    steps:
      - name: Checkout (for scripts)
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/scripts/
          sparse-checkout-cone-mode: false

      - name: Make script executable
        run: chmod +x .github/scripts/telegram-upload.sh

      - name: Download artifacts for Telegram
        if: needs.collect_and_upload.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: ref1nd-release-${{ needs.prepare.outputs.version }}
          path: telegram_files/

      - name: Send files to Telegram
        if: ${{ needs.collect_and_upload.result == 'success' && env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != '' }}
        run: |
          .github/scripts/telegram-upload.sh \
            "$TELEGRAM_BOT_TOKEN" \
            "$TELEGRAM_CHAT_ID" \
            "${{ needs.prepare.outputs.version }}" \
            "telegram_files"
        continue-on-error: true

      - name: Send build notification
        if: ${{ secrets.TELEGRAM_BOT_TOKEN != '' && secrets.TELEGRAM_CHAT_ID != '' }}
        run: |
          # 获取构建状态
          BUILD_STATUS="${{ needs.build_binaries.result }}"
          PACKAGE_STATUS="${{ needs.build_packages.result }}"
          UPLOAD_STATUS="${{ needs.collect_and_upload.result }}"
          ANDROID_PUSH_STATUS="${{ needs.push_android_binary.result }}"

          # 构建状态图标
          if [ "$BUILD_STATUS" = "success" ]; then
            BINARY_ICON="✅"
          else
            BINARY_ICON="❌"
          fi

          if [ "$PACKAGE_STATUS" = "success" ]; then
            PACKAGE_ICON="✅"
          else
            PACKAGE_ICON="❌"
          fi

          if [ "$UPLOAD_STATUS" = "success" ]; then
            UPLOAD_ICON="✅"
          else
            UPLOAD_ICON="❌"
          fi

          if [ "$ANDROID_PUSH_STATUS" = "success" ]; then
            ANDROID_PUSH_ICON="✅"
          else
            ANDROID_PUSH_ICON="❌"
          fi

          # 判断整体状态
          if [ "$BUILD_STATUS" = "success" ] && [ "$PACKAGE_STATUS" = "success" ] && [ "$UPLOAD_STATUS" = "success" ]; then
            OVERALL_STATUS="✅ 构建成功"
          else
            OVERALL_STATUS="❌ 构建失败"
          fi

          # 构建消息内容
          MESSAGE="🎯 **sing-box reF1nd 构建报告**%0A%0A${OVERALL_STATUS}%0A%0A🏷️ **版本**: \`${{ needs.prepare.outputs.version }}\`%0A🕐 **构建时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')%0A%0A📋 **提交信息**:%0A\`\`\`%0A${{ needs.prepare.outputs.commit_info }}%0A\`\`\`%0A%0A🔧 **构建状态**:%0A• 二进制文件: ${BINARY_ICON}%0A• 系统包: ${PACKAGE_ICON}%0A• 文件上传: ${UPLOAD_ICON}%0A• Android 推送: ${ANDROID_PUSH_ICON}%0A%0A📦 **构建产物**:%0A• Windows AMD64 二进制%0A• Linux AMD64 二进制%0A• OpenWrt aarch64 二进制%0A• Android ARM64 二进制%0A• Debian 系统包%0A• Alpine 系统包%0A• OpenWrt IPK 包%0A%0A📱 **Android 部署**:%0A• 仓库: ridesnails/box_for_magisk%0A• 分支: simple%0A• 路径: box/bin/sing-box%0A• 状态: ${ANDROID_PUSH_ICON}%0A%0A📝 **更新日志**:%0A${{ needs.prepare.outputs.changelog }}%0A%0A🔗 **详细日志**: [GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"

          # 发送消息到 Telegram
          curl -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d "chat_id=${TELEGRAM_CHAT_ID}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=Markdown" \
            -d "disable_web_page_preview=true" || echo "Failed to send notification"
        continue-on-error: true
