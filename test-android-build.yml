name: Test Android Build

on:
  workflow_dispatch:
    inputs:
      test_version:
        description: "Test version string"
        required: true
        type: string
        default: "v1.0.0-reF1nd-test"

jobs:
  test_android_build:
    name: Test Android ARM64 Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ^1.24

      - name: Setup Android NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r28
          local-cache: true

      - name: Test Android Build Environment
        run: |
          echo "=== Android NDK 信息 ==="
          echo "NDK Path: ${{ steps.setup-ndk.outputs.ndk-path }}"
          ls -la "${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/" | grep aarch64 | head -5
          
          echo "=== 测试编译器 ==="
          export ANDROID_NDK_HOME="${{ steps.setup-ndk.outputs.ndk-path }}"
          export CC="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"
          export CXX="${CC}++"
          
          if [ -f "$CC" ]; then
            echo "✅ 找到 Android 编译器: $CC"
            $CC --version
          else
            echo "❌ 未找到 Android 编译器: $CC"
            exit 1
          fi

      - name: Install build tool
        run: |
          echo "=== 安装构建工具 ==="
          go install -v ./cmd/internal/build
          which build

      - name: Test Android Build
        run: |
          set -xeuo pipefail
          echo "=== 开始 Android 构建测试 ==="
          
          export ANDROID_NDK_HOME="${{ steps.setup-ndk.outputs.ndk-path }}"
          export CC="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"
          export CXX="${CC}++"
          
          mkdir -p test_dist
          
          # 使用 build 工具进行构建
          build go build -v -trimpath -o test_dist/sing-box \
            -tags "with_gvisor,with_quic,with_dhcp,with_wireguard,with_utls,with_acme,with_clash_api,with_tailscale" \
            -ldflags "-s -buildid= -X github.com/sagernet/sing-box/constant.Version=${{ inputs.test_version }}" \
            ./cmd/sing-box
        env:
          CGO_ENABLED: "1"
          GOOS: android
          GOARCH: arm64

      - name: Verify Android Binary
        run: |
          echo "=== 验证构建结果 ==="
          if [ -f "test_dist/sing-box" ]; then
            echo "✅ Android 二进制文件构建成功"
            ls -la test_dist/sing-box
            file test_dist/sing-box
            
            # 检查是否是 Android ARM64 二进制
            if file test_dist/sing-box | grep -q "aarch64"; then
              echo "✅ 确认为 ARM64 架构"
            else
              echo "⚠️ 架构检查警告"
              file test_dist/sing-box
            fi
            
            # 检查文件大小
            SIZE=$(stat -c%s test_dist/sing-box)
            echo "文件大小: ${SIZE} bytes"
            
            if [ $SIZE -gt 1000000 ]; then
              echo "✅ 文件大小正常 (> 1MB)"
            else
              echo "⚠️ 文件大小可能异常 (< 1MB)"
            fi
          else
            echo "❌ Android 二进制文件构建失败"
            ls -la test_dist/
            exit 1
          fi

      - name: Upload test artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-android-binary
          path: test_dist/sing-box
          retention-days: 1

      - name: Test Summary
        run: |
          echo "🎉 Android ARM64 构建测试完成！"
          echo "✅ NDK 环境配置正确"
          echo "✅ 编译器工作正常"
          echo "✅ 构建工具可用"
          echo "✅ 二进制文件生成成功"
          echo ""
          echo "可以在 Artifacts 中下载测试生成的二进制文件进行进一步验证。"
